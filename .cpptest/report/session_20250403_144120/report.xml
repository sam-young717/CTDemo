<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="CT - Compliance + Coverage-2025-04-03" climode="true" endTime="2025-04-03T14:41:22-04:00" execEnv="linux_x86_64" hasViols="true" id="1742337086217" lang="en" machine="syoung-pc" project="CT - Compliance + Coverage" tag="${scontrol_branch}-linux_x86_64" time="2025-04-03T14:41:21-04:00" toolDispName="C/C++test CT" toolId="cpptestcov" toolName="C/C++test CT" toolVer="2024.2.0.20241114B889" user="syoung">
   <TestConfig machine="syoung-pc" name="cpptestcov" pseudoUrl="builtin://cpptestcov" user="syoung"/>
   <Authors>
      <Author id="dev1" name="syoung"/>
   </Authors>
   <Analyzers>
      <Analyzer id="cpptestcov" name="C/C++test CT" ver="2024.2.0.20241114B889"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc hash="-616767083" locRef="1" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="gtest_main.cpp" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/gtest_main.cpp"/>
         <Loc hash="-1109400981" locRef="2" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="Account.cpp" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/Account.cpp"/>
         <Loc hash="-1172569836" locRef="3" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="Account.hxx" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/Account.hxx"/>
         <Loc hash="1497090602" locRef="4" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="Bank.cpp" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/Bank.cpp"/>
         <Loc hash="14023177" locRef="5" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="BaseDisplay.hxx" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/BaseDisplay.hxx"/>
         <Loc hash="-812920828" locRef="6" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="BaseDisplay.cpp" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/BaseDisplay.cpp"/>
         <Loc hash="-1739111765" locRef="7" projId="CTDemo" projPath="/CTDemo" project="CTDemo" resProjPath="ATM.cpp" uri="file:/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/ATM.cpp"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <Exec ownerId="com.parasoft.xtest.checkers.api.execution" time="0:00:00">
      
      <AssocUrls>
         <Tag disp="Requirement" name="req"/>
         <Tag disp="Feature request" name="fr"/>
         <Tag disp="Problem report" name="pr"/>
         <Tag disp="Task" name="task"/>
         <Tag disp="Asset" name="asset"/>
         <Tag disp="Test" name="test"/>
      </AssocUrls>
   
      
      <Categories>
         <CategoryGroup authTot="2;" authUrg="0;" desc="This represents the findings arising from tests that have already been reviewed. This includes exceptions that have been marked as expected, assertion failures from previously reviewed tests, and any other kind of unexpected behavior that needs to be looked at (such as timeouts)." id="GROUP.UTEST.PROBL" label="Fix Unit Test Problems" name="Unit Test Problems" total="2">
            <Category authTot="0;" authUrg="0;" id="EXC" name="Runtime Exceptions" short="exception" total="0"/>
            <Category authTot="2;" authUrg="0;" id="FAIL" name="Assertion Failures" short="failure" total="2">
               <Type authTot="1;" authUrg="0;" name="gtest_main.cpp::Bank::getAccount_3" total="1"/>
               <Type authTot="1;" authUrg="0;" name="::Account::getBalanceInitBad" total="1"/>
            </Category>
            <Category authTot="0;" authUrg="0;" id="CON.VIOL" name="Contract Violations" short="contract violation" total="0"/>
            <Category authTot="0;" authUrg="0;" id="PROF.PROBL" name="Profiling Problems" short="profiling problem" total="0"/>
            <Category authTot="0;" authUrg="0;" id="EXEC.PROBL" name="Execution Problems" short="execution problem" total="0"/>
            <Category authTot="0;" authUrg="0;" id="TEST.PROBL" name="Test Problems" short="test problem" total="0"/>
         </CategoryGroup>
         <CategoryGroup authTot="0;" authUrg="0;" desc="These are the exceptions thrown by automatically generated test cases that need to be reviewed. After review they will be marked as &quot;expected&quot; or code fixed so that the exception does not occur any more." id="GROUP.UNVER.EXC" label="Review Exceptions" name="Exceptions" total="0">
            <Category authTot="0;" authUrg="0;" id="UNVER.EXC" name="Unverified Runtime Exceptions" short="unverified exception" total="0"/>
         </CategoryGroup>
         <CategoryGroup authTot="0;" authUrg="0;" desc="These are assertion failures from automatically generated tests that have not been reviewed. This is expected to be zero when the tests are executed as soon as they are generated, but can be non-zero in cases where tests that have not been reviewed, but the execution is repeated." id="GROUP.UNVER.FAIL" label="Review Assertion Failures" name="Assertion Failures" total="0">
            <Category authTot="0;" authUrg="0;" id="UNVER.FAIL" name="Unverified Assertion Failures" short="unverified failure" total="0"/>
         </CategoryGroup>
      </Categories>
      <Projects>
         <Project err="0" fail="2" id="CTDemo" name="CTDemo" pass="13" total="15">
            <CategoryGroupStats id="GROUP.UTEST.PROBL" total="2"/>
            <CategoryGroupStats id="GROUP.UNVER.EXC" total="0"/>
            <CategoryGroupStats id="GROUP.UNVER.FAIL" total="0"/>
         </Project>
      </Projects>
      
  <APICoverage/>

      
  <TrafficData/>
      
  <EnvData/>
      <FuncAPISecurity pentest="false">
         
  <Categories/>
         
  <Attacks/>
      </FuncAPISecurity>
      <Axe scan="false">
         
  <AxeRules/>
      </Axe>
      
  <ExecViols>
    <UnitViol loc="/CTDemo/gtest_main.cpp" ln="1" sev="1" auth="syoung" analyzer="cpptestcov" locRef="1" cat="FAIL" testId="cpptest.provider://Account::getBalanceInitBad" lnHash="0">
      <Thr>
        <ThrPart type="::Account::getBalanceInitBad" msg="Detected 1 GoogleTest assertion failure(s) in test case [getBalanceInitBad]"/>
      </Thr>
    </UnitViol>
    <UnitViol loc="/CTDemo/gtest_main.cpp" ln="1" sev="1" auth="syoung" analyzer="cpptestcov" locRef="1" cat="FAIL" testId="cpptest.provider://Bank::getAccount_3" lnHash="0">
      <Thr>
        <ThrPart type="gtest_main.cpp::Bank::getAccount_3" msg="Detected 1 GoogleTest assertion failure(s) in test case [getAccount_3]"/>
      </Thr>
    </UnitViol>
  </ExecViols>

      
   <ExecutedTestsDetails type="UT">
      <Total fail="2" total="15" pass="13" name="Passed / Total" authErr="0;" authFail="2;">
         <Project fail="2" total="15" pass="13" name="CTDemo" authErr="0;" id="CTDemo" authFail="2;">
            <TestSuite ln="1" locRef="1" root="true" name="Account" id="cpptest.provider://Account" fail="1" total="9" pass="8" authErr="0;" authFail="1;">
               <Test ln="1" auth="syoung" locRef="1" name="listTransactionsUnknownDisplay" id="cpptest.provider://Account::listTransactionsUnknownDisplay" status="pass" total="1" pass="1" authErr="0;" authFail="0;"/>
               <Test ln="1" auth="syoung" locRef="1" name="getBalanceDefault" id="cpptest.provider://Account::getBalanceDefault" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getBalanceInit" id="cpptest.provider://Account::getBalanceInit" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getAndSetPassword" id="cpptest.provider://Account::getAndSetPassword" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getAndSetPasswordEmpty" id="cpptest.provider://Account::getAndSetPasswordEmpty" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getAndSetAccountNumber" id="cpptest.provider://Account::getAndSetAccountNumber" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="depositSimple" id="cpptest.provider://Account::depositSimple" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="debitSimple" id="cpptest.provider://Account::debitSimple" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-520" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getBalanceInitBad" id="cpptest.provider://Account::getBalanceInitBad" status="fail" fail="1" total="1" authErr="0;" authFail="1;">
                  <assoc id="ATM_test-520" tag="req"/>
                  <Detail msg="/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/gtest_main.cpp:101&#xa;Expected equality of these values:&#xa;  acct.getBalance()&#xa;    Which is: 223&#xa;  initial - 1.0&#xa;    Which is: 222" sev="Normal" type="Assertion"/>
               </Test>
            </TestSuite>
            <TestSuite ln="1" locRef="1" root="true" name="Bank" id="cpptest.provider://Bank" fail="1" total="5" pass="4" authErr="0;" authFail="1;">
               <Test ln="1" auth="syoung" locRef="1" name="addAccount" id="cpptest.provider://Bank::addAccount" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-521" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="addAccountMultiple" id="cpptest.provider://Bank::addAccountMultiple" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-521" tag="req"/>
               </Test>
               <Test ln="1" auth="syoung" locRef="1" name="getAccount_1" id="cpptest.provider://Bank::getAccount_1" status="pass" total="1" pass="1" authErr="0;" authFail="0;"/>
               <Test ln="1" auth="syoung" locRef="1" name="getAccount_2" id="cpptest.provider://Bank::getAccount_2" status="pass" total="1" pass="1" authErr="0;" authFail="0;"/>
               <Test ln="1" auth="syoung" locRef="1" name="getAccount_3" id="cpptest.provider://Bank::getAccount_3" status="fail" fail="1" total="1" authErr="0;" authFail="1;">
                  <Detail msg="/mnt/c/Users/syoung/Documents/CTRunner/actions-runner/_work/CTDemo/CTDemo/gtest_main.cpp:151&#xa;Value of: nullptr != acct&#xa;  Actual: false&#xa;Expected: true" sev="Normal" type="Assertion"/>
               </Test>
            </TestSuite>
            <TestSuite ln="1" locRef="1" root="true" name="BaseDisplay" id="cpptest.provider://BaseDisplay" total="1" pass="1" authErr="0;" authFail="0;">
               <Test ln="1" auth="syoung" locRef="1" name="getType" id="cpptest.provider://BaseDisplay::getType" status="pass" total="1" pass="1" authErr="0;" authFail="0;">
                  <assoc id="ATM_test-522" tag="req"/>
               </Test>
            </TestSuite>
         </Project>
      </Total>
   </ExecutedTestsDetails>

      
  <FuncTestDetails/>
      <Coverage>
         <Types>
            <CvgType cvgDecor="Marker" dispCvg="executable lines" dispId="Line" dispName="Line Coverage" dispNoCvg="no executable lines" id="LC"/>
         </Types>
         <CvgStats>
            <CvgInfo elem="Total" exp="1" num="26" total="79" val="33">
               <CvgInfo elem="CTDemo" exp="1" num="26" total="79" val="33">
                  <CvgInfo elem="ATM.cpp" num="0" total="21" val="0">
                     <CvgInfo elem="ATM::ATM(Bank *, BaseDisplay *)" num="0" total="2" val="0"/>
                     <CvgInfo elem="ATM::fillUserRequest(UserRequest, double)" num="0" total="6" val="0"/>
                     <CvgInfo elem="ATM::makeDeposit(double)" num="0" total="3" val="0"/>
                     <CvgInfo elem="ATM::showBalance()" num="0" total="3" val="0"/>
                     <CvgInfo elem="ATM::showTransations()" num="0" total="1" val="0"/>
                     <CvgInfo elem="ATM::showTransations()::[lambda(const std::tuple&lt;UserRequest, double> &amp;) (instance 1)]" num="0" total="1" val="0"/>
                     <CvgInfo elem="ATM::viewAccount(int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="0" total="2" val="0"/>
                     <CvgInfo elem="ATM::withdraw(double)" num="0" total="3" val="0"/>
                  </CvgInfo>
                  <CvgInfo elem="Account.cpp" num="12" total="21" val="57">
                     <CvgInfo elem="Account::Account(Account&amp;&amp;)" num="0" total="1" val="0"/>
                     <CvgInfo elem="Account::Account(double)" num="2" total="3" val="67"/>
                     <CvgInfo elem="Account::debit(double)" num="3" total="3" val="100"/>
                     <CvgInfo elem="Account::deposit(double)" num="3" total="3" val="100"/>
                     <CvgInfo elem="Account::listTransactions(BaseDisplay &amp;, UserRequest)" num="4" total="8" val="50"/>
                     <CvgInfo elem="Account::listTransactions(BaseDisplay &amp;, UserRequest)::[lambda(std::tuple&lt;UserRequest, double>) (instance 1)]" num="0" total="3" val="0"/>
                  </CvgInfo>
                  <CvgInfo elem="Account.hxx" num="0" total="6" val="0">
                     <CvgInfo elem="Account::getAccountNumber() const" num="0" total="1" val="0"/>
                     <CvgInfo elem="Account::getBalance() const" num="0" total="2" val="0"/>
                     <CvgInfo elem="Account::getPassword()" num="0" total="1" val="0"/>
                     <CvgInfo elem="Account::setAccountNumber(int)" num="0" total="1" val="0"/>
                     <CvgInfo elem="Account::setPassword(const char *)" num="0" total="1" val="0"/>
                  </CvgInfo>
                  <CvgInfo elem="Bank.cpp" num="12" total="12" val="100">
                     <CvgInfo elem="Bank::Bank()" num="1" total="1" val="100"/>
                     <CvgInfo elem="Bank::addAccount()" num="4" total="4" val="100"/>
                     <CvgInfo elem="Bank::getAccount(int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="6" total="6" val="100"/>
                     <CvgInfo elem="Bank::~Bank()" num="1" total="1" val="100"/>
                  </CvgInfo>
                  <CvgInfo elem="BaseDisplay.cpp" num="2" total="17" val="12">
                     <CvgInfo elem="BaseDisplay::getType()" num="1" total="1" val="100"/>
                     <CvgInfo elem="BaseDisplay::logError(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char>>)" num="1" total="1" val="100"/>
                     <CvgInfo elem="BaseDisplay::showBalance(double)" num="0" total="1" val="0"/>
                     <CvgInfo elem="BaseDisplay::showInfoToUser(const char *)" num="0" total="2" val="0"/>
                     <CvgInfo elem="BaseDisplay::showTransaction(UserRequest, double)" num="0" total="12" val="0"/>
                  </CvgInfo>
                  <CvgInfo elem="BaseDisplay.hxx" num="0" total="2" val="0">
                     <CvgInfo elem="BaseDisplay::BaseDisplay()" num="0" total="1" val="0"/>
                     <CvgInfo elem="BaseDisplay::~BaseDisplay()" num="0" total="1" val="0"/>
                  </CvgInfo>
               </CvgInfo>
            </CvgInfo>
         </CvgStats>
         
      </Coverage>
   </Exec>
   <Statistics>
      
   </Statistics>
</ResultsSession>